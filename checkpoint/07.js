const { LinkedList } = require("../DS");
// ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è
//
//
// 7Ô∏è‚É£ ***** EJERCICIO 7 ***** - LinkedList.migrarStock() 7Ô∏è‚É£
//  La tienda de ropa necesita migrar sus datos de stock de una lista a un objeto.
//  Para esto deber√°s agregar al prototype de LinkedList el m√©todo üì¶ migrarStock() üì¶, el cual deber√° retornar todos los valores almacenados
//  de la lista en un nuevo objeto con formato nombre:stock.
//
// EJEMPLOS:
//  Dada la siguiente lista:
//
// ({nombre: 'Camisetas'}, stock: 22) ‚û°
// ({nombre:'Pantalones', stock: 12}) ‚û°
// ({nombre:'Zapatos', stock: 45}) ‚û°
// ({nombre: 'Bufandas', stock: 12}) ‚û°
// ({nombre: 'Sacos', stock: 4})
//
// lista.migrarStock() devuelve ‚û°
// {
//    Camisetas: 22,
//    Pantalones: 12,
//    Zapatos: 45,
//    Bufandas: 12,
//    Sacos: 4
// }
//
//
// REQUISITOS:
// üü¢ Retornar un objeto con la prenda de ropa y su stock a modo de clave/valor mostrado en el ejemplo arriba
// üü¢ Si la lista est√° vac√≠a retornar un mensaje que diga exactamente: "No hay stock para migrar"

LinkedList.prototype.migrarStock = function () {
  // Tu c√≥digo aqu√≠:
  let respuesta = {};
  if (!this.head) return "No hay stock para migrar";
  let actual = this.head;
  while (actual) {
    respuesta[actual.value.nombre] = actual.value.stock;
    actual = actual.next;
  }
  return respuesta;
};

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = {
  LinkedList,
};
