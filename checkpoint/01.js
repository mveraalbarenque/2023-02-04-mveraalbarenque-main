const Queue = require("../DS").Queue;
// ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è
//
//  ----*** üëî CLOTHES CHECKPOINT üëî ***----
//
// Felicitaciones por llegar a esta instancia! El checkpoint que realizar√°s a continuaci√≥n
// consistir√° en resolver varios problemas que surgieron en una tienda de ropa/indumentaria.
// Tendr√°s que resolver cada uno de ellos, aplicando los conceptos aprendidos durante el M√≥dulo Uno.
// üçÄ Suerte!!! üçÄ
//
//
// 1Ô∏è‚É£ ***** EJERCICIO 1 QUEUE ***** - guardarCamisetas 1Ô∏è‚É£
//
// Ha llegado un cami√≥n con un nuevo lote de camisetas, es necesario recoger todas y guardarlas en dentro de la tienda.
// Para esto tendr√°s que implementar la funci√≥n guardarCamisetas, la cu√°l recibir√° por par√°metros una queue con muchas
// üëï Camisetas üëï que se tendr√°n que guardar en un objeto que nos servir√° como contenedor.
//
// EJEMPLOS:
// Dada la siguiente queue (INPUT):
// ["Camiseta Blanca", "Camiseta Negra", "Camiseta Azul", "Camiseta Amarilla", "Camiseta Roja"]
// guardarCamisetas() Devuelve (OUTPUT) ‚û°
// {
//  Camiseta Blanca: Camiseta Blanca,
//  Camiseta Negra: Camiseta Negra,
//  Camiseta Amarilla: Camiseta Amarilla,
//  Camiseta Roja: Camiseta Roja
// }
//
// REQUISITOS:
//  üü¢ Respetar el principio de FIFO que corresponde a las queues a la hora de guardar las camisetas
//  üü¢ Retornar un objeto, que tendr√° como key value, los elementos que agregas y quitas de la queue
//  üü¢ SI O SI necesit√°s utilizar una queue!
// TIP: Chequear el archivo DS.js para ver la funci√≥n constructora Queue, y ver sus m√©todos disponibles.

function guardarCamisetas(ropaQueue) {
  // Tu c√≥digo aqu√≠:
  let respuesta = {};
  while (ropaQueue.size() > 0) {
    const actual = ropaQueue.dequeue();
    respuesta[actual] = actual;
  }
  return respuesta;
}

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = {
  guardarCamisetas,
};
