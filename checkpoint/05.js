// 5Ô∏è‚É£ ***** EJERCICIO 5 RECURSI√ìN***** - liquidacion() 5Ô∏è‚É£
//
// Implementar la funci√≥n üí≤ liquidacion() üí≤ la cu√°l recibir√° por par√°metros un array de objetos anidados que
// Representar√°n algunas prendas de ropa en una vidriera, cada una podr√° contener, o no, una etiqueta que indique su estado.
// Tendr√°s que recursivamente iterar el array, y retornar uno nuevo, s√≥lo con los objetos que tengan la etiqueta "LIQUIDACION" asociada.
//
// EJEMPLOS:
//  Dado el siguiente arreglo: [{ camiseta: { LIQUIDACION: true } }, { gorro: { DESCUENTO: true } }, { abrigo: {} }, { pantalones: { LIQUIDACION: true } }]
//  liquidacion() Devuelve ‚û°
//  [{ pantalones: { LIQUIDACION: true } }, { camiseta: { LIQUIDACION: true } }]
//
// REQUISITOS:
//  üü¢ Retornar un nuevo arreglo que contenga las prendas de ropa en LIQUIDACION
//  üü¢ Implementar recursividadüîÑ!
//  üü¢ Si el arreglo est√° vac√≠o, retornar un mensaje que diga "No hay prendas en liquidaci√≥n"
//
// CUIDADO: ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è  las prendas tiene que ir agregandose de derecha a izquierda como se muestra en el ejemplo de mas arriba. ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è
//
// TIP: tambien podes usar un rest parameter.

function liquidacion(array, respuesta = []) {
  // Tu c√≥digo aqu√≠:
  if (array.length !== 0) {
    const actual = array.pop();
    const key = Object.keys(actual);
    if (actual[key].LIQUIDACION) {
      respuesta.push(actual);
    }
    return liquidacion(array, respuesta);
  } else {
    return respuesta;
  }
}

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = {
  liquidacion,
};
